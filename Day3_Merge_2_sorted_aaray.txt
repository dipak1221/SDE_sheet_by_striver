// Merge two sorted arrays with O(1) extra space



Approach 1:
// just put array a and array b in a single array and sort that final array 

    vector<int> a = {2, 4, 5, 7};
    vector<int> b = {3, 4, 9};
    // int asize = 4, bsize = 3;
    vector<int> aa(a.size() + b.size());
    int j=0;
    for (int i = 0; i < a.size(); i++)
    {
        aa[j++]=a[i];
    }
    for (int i = 0; i < b.size(); i++)
    {
        aa[j++]=b[i];
    }
    sort(aa.begin(),aa.end());
    j = 0;
    for (int i = 0; i < a.size(); i++)
    {
        a[i] = aa[j++];
        
    }
    for (int i = 0; i < b.size(); i++)
    {
        b[i] = aa[j++];
    }

    Time Complexity = 
            O(N) - for taking out all element 
            O(NlogN) - for sorting
            O(N) - for element put back to array a and array b
            
        total =O(N) + O(N)+ O(N(log(N))
    Space Complexity = O(N)



Approach 2:

By Insertion Sort  condition no extra space 

vector<int> a = {2, 4, 5, 7,8,9,12};
    vector<int> b = {3, 4, 9,12,23,45,56};
    int i = 0, j = 0;
    while (i < a.size())
    {
        if (a[i] > b[j])
        {
            swap(a[i], b[j]);
            sort(b.begin(), b.end());
        }
        i++;
    }


    for (int i = 0; i < a.size(); i++)
    {
        cout << a[i] << " ";
    }
    for (int i = 0; i < b.size(); i++)
    {
        cout << b[i] << " ";
    }

just pick one element from array a and compare with 1st element of array b if it is less then fine or else swap it and sort array b 
Do this with every element of array a 

    Time Complexity : n*m*log(m)
    space : O(1)

Approach 3:



